import { Input, forwardRef, Component, ViewChild, Output, EventEmitter } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
var isEqual = require('lodash.isequal');
var cloneDeep = require('lodash.clonedeep');
var find = require('lodash.find');
var differenceWith = require('lodash.differencewith');
export var SELECTIZE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NgSelectizeComponent; }),
    multi: true
};
export var NgSelectizeComponent = (function () {
    function NgSelectizeComponent() {
        this.onBlur = new EventEmitter(false);
        // Control value accessors.
        this.onTouchedCallback = function () { };
        this.onChangeCallback = function () { };
    }
    NgSelectizeComponent.prototype.ngOnInit = function () {
        this.reset();
    };
    NgSelectizeComponent.prototype.reset = function () {
        this.selectize = $(this.selectizeInput.nativeElement).selectize(this.config)[0].selectize;
        this.selectize.on('change', this.onSelectizeValueChange.bind(this));
        this.selectize.on('option_add', this.onSelectizeOptionAdd.bind(this));
        this.selectize.on('blur', this.onBlurEvent.bind(this));
        this.onSelectizeOptionsChange();
        this.onSelectizeOptionGroupChange();
        if (this.placeholder && this.placeholder.length > 0) {
            this.updatePlaceholder();
        }
        this._oldOptions = cloneDeep(this.options);
        this._oldOptionGroups = cloneDeep(this.optionGroups);
    };
    /**
     * Change detection for primitive types.
     */
    NgSelectizeComponent.prototype.ngOnChanges = function (changes) {
        if (this.selectize) {
            if (changes.hasOwnProperty('placeholder') || changes.hasOwnProperty('hasOptionsPlaceholder') || changes.hasOwnProperty('noOptionsPlaceholder')) {
                this.updatePlaceholder();
            }
            if (changes.hasOwnProperty('enabled')) {
                this.onEnabledStatusChange();
            }
        }
    };
    /**
     * Implementing deep check for option comparison
     *
     * FIXME -> Implement deep check to only compare against label and value fields.
     */
    NgSelectizeComponent.prototype.ngDoCheck = function () {
        if (!isEqual(this._oldOptions, this.options)) {
            this.onSelectizeOptionsChange();
            this._oldOptions = cloneDeep(this.options);
        }
        if (!isEqual(this._oldOptionGroups, this.optionGroups)) {
            this.onSelectizeOptionGroupChange();
            this._oldOptionGroups = cloneDeep(this.optionGroups);
        }
        this.evalHasError();
    };
    NgSelectizeComponent.prototype.onBlurEvent = function () {
        if (this.formControl) {
            this.formControl.markAsTouched();
        }
        this.onBlur.emit();
        this.evalHasError();
    };
    /**
     * Refresh selected values when options change.
     */
    NgSelectizeComponent.prototype.onSelectizeOptionAdd = function (optionValue) {
        if (this.value) {
            var items = typeof this.value === 'string' ? [this.value] : this.value;
            if (find(items, function (value) {
                return value === optionValue;
            })) {
                this.selectize.addItem(optionValue, true);
            }
        }
    };
    NgSelectizeComponent.prototype.evalHasError = function () {
        if (this.formControl && this.formControl.touched && this.formControl.invalid) {
            $(this.selectize.$control).parent().addClass(this.errorClass || 'has-error');
        }
        else {
            $(this.selectize.$control).parent().removeClass(this.errorClass || 'has-error');
        }
    };
    /**
     * Update the current placeholder based on the given input parameter.
     */
    NgSelectizeComponent.prototype.updatePlaceholder = function () {
        this.selectize.settings.placeholder = this.getPlaceholder();
        this.selectize.updatePlaceholder();
        this.selectize.showInput(); // Without this, when options are cleared placeholder only appears after focus.
    };
    /**
     * Called when a change is detected in the 'enabled' input field.
     * Sets the selectize state based on the new value.
     */
    NgSelectizeComponent.prototype.onEnabledStatusChange = function () {
        this.enabled ? this.selectize.enable() : this.selectize.disable();
    };
    /**
     * Triggered when a change is detected with the given set of options.
     */
    NgSelectizeComponent.prototype.onSelectizeOptionsChange = function () {
        var _this = this;
        var optionsRemoved = differenceWith(this._oldOptions, this.options, function (oldValue, newValue) {
            return oldValue[_this.selectize.settings.valueField] === newValue[_this.selectize.settings.valueField]
                && oldValue[_this.selectize.settings.labelField] === newValue[_this.selectize.settings.labelField];
        });
        var newOptionsAdded = differenceWith(this.options, this._oldOptions, function (oldValue, newValue) {
            return oldValue[_this.selectize.settings.valueField] === newValue[_this.selectize.settings.valueField]
                && oldValue[_this.selectize.settings.labelField] === newValue[_this.selectize.settings.labelField];
        });
        if (optionsRemoved && optionsRemoved.length > 0) {
            optionsRemoved.forEach(function (option) {
                _this.selectize.removeOption(option[_this.selectize.settings.valueField]);
            });
        }
        if (newOptionsAdded && newOptionsAdded.length > 0) {
            newOptionsAdded.forEach(function (option) {
                _this.selectize.addOption(cloneDeep(option));
            });
        }
        this.updatePlaceholder();
    };
    /**
     * Triggered when a change is detected with the given set of option groups.
     */
    NgSelectizeComponent.prototype.onSelectizeOptionGroupChange = function () {
        var _this = this;
        if (this.optionGroups != null && this.optionGroups.length > 0) {
            this.optionGroups.forEach(function (optionGroup) {
                _this.selectize.addOptionGroup(optionGroup.id, optionGroup);
            });
        }
    };
    /**
     * Dispatches change event when a value change is detected.
     * @param $event
     */
    NgSelectizeComponent.prototype.onSelectizeValueChange = function ($event) {
        this.value = this.selectize.getValue();
    };
    /**
     * Returns the applicable placeholder.
     */
    NgSelectizeComponent.prototype.getPlaceholder = function () {
        var newPlaceholder;
        if (this.options != null && this.options.length > 0 && this.hasOptionsPlaceholder != null && this.hasOptionsPlaceholder.length > 0) {
            newPlaceholder = this.hasOptionsPlaceholder;
        }
        else if ((this.options == null || this.options.length == 0) && (this.noOptionsPlaceholder != null && this.noOptionsPlaceholder.length > 0)) {
            newPlaceholder = this.noOptionsPlaceholder;
        }
        else {
            newPlaceholder = this.placeholder;
        }
        return newPlaceholder;
    };
    /**
     * Implementation from ControlValueAccessor
     *
     * Empty check on 'obj' removed due to restriction on resetting the field.
     * From testing, async should still function appropriately.
     *
     * FIXME This might not be necessary anymore..
     *
     * @param obj
     */
    NgSelectizeComponent.prototype.writeValue = function (obj) {
        if (obj !== this._value) {
            this._value = obj;
        }
        this.selectize.setValue(this._value);
    };
    /**
     * Implementation from ControlValueAccessor, callback for (ngModelChange)
     * @param fn
     */
    NgSelectizeComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * Implementation from ControlValueAccessor
     * @param fn
     */
    NgSelectizeComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    Object.defineProperty(NgSelectizeComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            var _this = this;
            if (this._value !== value) {
                setTimeout(function () {
                    _this._value = cloneDeep(value);
                    _this.onChangeCallback(_this._value);
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    NgSelectizeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-selectize',
                    template: "<select #selectizeInput></select>",
                    providers: [SELECTIZE_VALUE_ACCESSOR]
                },] },
    ];
    /** @nocollapse */
    NgSelectizeComponent.ctorParameters = function () { return []; };
    NgSelectizeComponent.propDecorators = {
        'config': [{ type: Input, args: ['config',] },],
        'options': [{ type: Input, args: ['options',] },],
        'optionGroups': [{ type: Input, args: ['optionGroups',] },],
        'placeholder': [{ type: Input, args: ['placeholder',] },],
        'hasOptionsPlaceholder': [{ type: Input, args: ['hasOptionsPlaceholder',] },],
        'noOptionsPlaceholder': [{ type: Input, args: ['noOptionsPlaceholder',] },],
        'enabled': [{ type: Input, args: ['enabled',] },],
        '_value': [{ type: Input, args: ['ngModel',] },],
        'formControl': [{ type: Input },],
        'errorClass': [{ type: Input },],
        'onBlur': [{ type: Output },],
        'selectizeInput': [{ type: ViewChild, args: ['selectizeInput',] },],
    };
    return NgSelectizeComponent;
}());
//# sourceMappingURL=ng-selectize.component.js.map